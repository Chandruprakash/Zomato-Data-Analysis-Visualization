# -*- coding: utf-8 -*-
"""Zomato-Data-Analysis&Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_9CUReDJnyxpJXr5X1ekZ0v0HmOc3zQQ
"""

!pip install jupyter_dash 
!pip install dash_bootstrap_components

from jupyter_dash import JupyterDash
from dash import Dash, dcc, html, Input, Output
import dash_bootstrap_components as dbc
import dash_core_components as dcc
import plotly.express as px
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots


df1 = pd.read_csv("/zomato.csv")
df2 = pd.read_csv("/Country-Code.xlsx - Sheet1.csv")


import requests
Conv_list = []

for i in df2["Country Code"]:
  url = f'https://api.exchangerate.host/convert?from={i}&to=INR'

  response = requests.get(url)
  data = response.json()
  result= data["result"]
  Conv_list.append(round(result,2))

df2["Conv_list"] = Conv_list

# print(df2)


df3 = pd.merge(df1,df2, on = "Country Code")

df3["Avg Cost in INR"] = df3["Conv_list"]*df3["Average Cost for two"]

country_data = df3.Country.unique()

app = JupyterDash(__name__, external_stylesheets=[dbc.themes.QUARTZ])

app.layout = html.Div([
    
    html.H1("ZOMATO DATA ANALYSIS",className="bg-primary text-white text-center"),

    html.Div([
        html.Label("Country-Specific Data : "),
        dcc.Dropdown(
    id="dropdown",
    options=[{"label": x, "value": x} for x in country_data],
    value=country_data[7],
    clearable=False,
    className="bg-opacity-50 p-2 m-1 bg-primary text-dark fw-bold rounded",
    style={'width':"50%"},
        ),
    html.Div([
        dbc.Row([
         dbc.Col(dcc.Graph(id="Totalcost-chart"),width=6,className="shadow-sm p-3 mb-5 bg-white rounded"),
        dbc.Col(dcc.Graph(id="Totalrating-chart"),width=6,className = "shadow-sm p-3 mb-5 bg-white rounded")
        ])
])

     ] ),


        
        html.Br(),
        html.Label("Select City"),
        dcc.Dropdown(
            id="city_dropdown",
            value="Bangalore"
        ), 
        html.Div([
        dcc.Graph(id="City_fav_cus-chart"),
        dcc.Graph(id="City_costly_cus-chart")
        ]),

        dcc.Graph(id="City_rating-chart"),
        dcc.Graph(id="City_delivery-chart"),
        dcc.Graph(id="din-in-chart"),
        html.Label("Select City to compare"),
        dcc.Dropdown(
            id="citydropdown_1",
            value="Bangalore",
            multi=True
        ),
        dcc.Graph(id="multi-chart_1"),
        dcc.Graph(id="multi-chart_2"),
        dcc.Graph(id="multi-chart_3")

        ]
    )



@app.callback(
   Output("Totalcost-chart", "figure"),
   [Input("dropdown", "value")])

def update_bar_chart(Country):

   Selected_countries = df3[df3["Country"]== Country]
   city_cost = Selected_countries.groupby("City")["Avg Cost in INR"].sum()
   city_cost = pd.DataFrame(city_cost)
   city_cost.rename(columns={"Avg Cost in INR": "Amount Spent"},inplace = True)

   fig = px.bar(city_cost, y= "Amount Spent")

   fig.update_layout(
    title="Total Amount Spend by Cities",
    xaxis_title="City",
    yaxis_title="Total Amount")
   
   return fig
   
@app.callback(
    Output("Totalrating-chart", "figure"),
   [Input("dropdown", "value")])

def update_bar_chart(Country):

   Selected_countries = df3[df3["Country"]== Country]
   fig = px.scatter(Selected_countries, x="Aggregate rating", y="Avg Cost in INR",
                     hover_name="Restaurant Name")
   fig.update_layout(
       title="Aggregrate ratting of Country based on ",
    xaxis_title="Aggregrate ratting",
    yaxis_title="Amount in INR")

   return fig

@app.callback(
   Output("city_dropdown", "options"),
   Output("citydropdown_1", "options"),
   [Input("dropdown", "value")])

def update_city_dropdown(Country):
  Selected_countries = df3[df3["Country"]== Country]
  return [{"label": x, "value": x} for x in Selected_countries.City.unique()],[{"label": x, "value": x} for x in Selected_countries.City.unique()]


@app.callback(
   Output("City_fav_cus-chart", "figure"),
   Input("city_dropdown", "value"),
  prevent_initial_call=True)

def update_fav_cus(input_value):
#  return f'input_value:{input_value.upper()}'
  Selected_city = df3[df3["City"]== input_value]
  fig = px.pie(Selected_city,names = "Cuisines" )
  fig.update_layout(
       title=f"Favoutite Cuisines in {input_value} ")
  fig

  return fig

@app.callback(
   Output("City_costly_cus-chart", "figure"),
   Input("city_dropdown", "value"),
  prevent_initial_call=True)

def update_costly_cus(input_value):
#  return f'input_value:{input_value.upper()}'
  Selected_city = df3[df3["City"]== input_value]
  fig = px.pie(Selected_city,names = "Cuisines",values= "Avg Cost in INR" )
  fig.update_layout(
  title=f"Costilest Cuisines in {input_value} ")
  fig

  return fig

@app.callback(
   Output("City_rating-chart", "figure"),
   Input("city_dropdown", "value"),
  prevent_initial_call=True)

def update_Agg_rating_cus(input_value):
  Selected_city = df3[df3["City"]== input_value]
  fig = px.scatter(Selected_city, x="Cuisines", y="Aggregate rating",
                     hover_name="Restaurant Name",color="Avg Cost in INR",)
  
  fig.update_layout(
  title=f"Aggregrate rating based on Cuisines at {input_value} ")  

  return fig

@app.callback(
   Output("City_delivery-chart", "figure"),
   Input("city_dropdown", "value"),
  prevent_initial_call=True)

def update_(input_value):
  Selected_city = df3[df3["City"]== input_value]
  fig = px.pie(Selected_city, names = "Has Online delivery",color_discrete_sequence=px.colors.sequential.RdBu)

  fig.update_layout(
  title=f"{input_value}'s Online Delivery percentage")

  return fig

@app.callback(
   Output("din-in-chart", "figure"),
   Input("city_dropdown", "value"),
  prevent_initial_call=True)

def update_fav_cus(input_value):
  Selected_city = df3[df3["City"]== input_value]
  fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])
  fig.add_trace(go.Pie(labels=Selected_city["Has Table booking"]),
                1, 1)
  fig.add_trace(go.Pie(labels=Selected_city["Has Online delivery"]),
                1, 2)

  fig.update_traces(hole=.4)


  fig.update_layout(
      title_text="dine in vs online delivery",),
  return fig


@app.callback(
   Output("multi-chart_1", "figure"),
   Input("citydropdown_1", "value"),
   prevent_initial_call=True
 )

def update_comp_chart_1(val_chosen):

  Selected_city = df3[df3["City"].isin(val_chosen)]
  Data = Selected_city[Selected_city["Has Online delivery"]=="Yes"]
  a = Data.groupby("City")["Avg Cost in INR"].sum()
  a = pd.DataFrame(a)
  a.rename(columns={"Avg Cost in INR": "Total Amount Spent"},inplace = True)


  fig = px.bar(a, x="Total Amount Spent")

  fig.update_layout(
      title_text="Comparison chart on Amount spent in Online Delivery ")

  return fig

@app.callback(
   Output("multi-chart_2", "figure"),
   Input("citydropdown_1", "value"),
   prevent_initial_call=True
 )

def update_comp_chart_2(val_chosen):

  Selected_city = df3[df3["City"].isin(val_chosen)]
  Data = Selected_city[Selected_city["Has Table booking"]=="Yes"]
  a = Data.groupby("City")["Avg Cost in INR"].sum()
  a = pd.DataFrame(a)
  a.rename(columns={"Avg Cost in INR": "Total Amount Spent"},inplace = True)


  fig = px.bar(a, x="Total Amount Spent")

  fig.update_layout(
      title_text="Comparison chart on Amount spent in Dine-In ")

  return fig

@app.callback(
   Output("multi-chart_3", "figure"),
   Input("citydropdown_1", "value"),
   prevent_initial_call=True
 )

def update_comp_chart_3(val_chosen):
  Selected_city = df3[df3["City"].isin(val_chosen)]
  Selected_city.rename(columns={"Avg Cost in INR": "Cost of a dish"},inplace = True)

  fig = px.box(Selected_city, y="Cost of a dish",x = "City")

  fig.update_layout(
      title_text="Comparison chart on Living Cost ")
  
  return fig


app.run_server(mode = "External")